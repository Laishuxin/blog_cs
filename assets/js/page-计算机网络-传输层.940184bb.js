(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{480:function(t,e,v){t.exports=v.p+"assets/img/2021-09-29-13-06-30.4b21869c.png"},481:function(t,e,v){t.exports=v.p+"assets/img/2021-09-29-14-52-43.2a40f3e9.png"},482:function(t,e,v){t.exports=v.p+"assets/img/2021-09-29-15-31-25.393e014b.png"},483:function(t,e,v){t.exports=v.p+"assets/img/2021-09-29-15-46-04.3a59f7e7.png"},484:function(t,e,v){t.exports=v.p+"assets/img/2021-09-29-14-13-01.43f6e1b9.png"},485:function(t,e,v){t.exports=v.p+"assets/img/2021-09-29-14-17-02.19b75c2a.png"},486:function(t,e,v){t.exports=v.p+"assets/img/2021-09-29-14-26-52.3c384be0.png"},487:function(t,e,v){t.exports=v.p+"assets/img/2021-09-29-14-33-53.7cb984d7.png"},614:function(t,e,v){"use strict";v.r(e);var _=v(1),a=Object(_.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"传输层概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#传输层概述"}},[t._v("#")]),t._v(" 传输层概述")]),t._v(" "),_("p",[t._v("传输层位于 OSI 参考模型的第四层。位于五层体系结构中的第 4 层，是主机\n采用的层次。")]),t._v(" "),_("p",[t._v("在五层体系中，传输层位于网络层和应用层之间，可以使用下层（网络层）提供\n的服务，同时，为上层（应用层）提供服务。")]),t._v(" "),_("h3",{attrs:{id:"传输层的功能"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#传输层的功能"}},[t._v("#")]),t._v(" 传输层的功能")]),t._v(" "),_("ol",[_("li",[t._v("提供进程与进程之间逻辑通信。")]),t._v(" "),_("li",[t._v("复用和分用。\n"),_("ul",[_("li",[t._v("复用：发送方不同的进程都可以使用同一个传输层协议传送数据。")]),t._v(" "),_("li",[t._v("分用：接收方的传输层在剥去报文首部后能够把这些数据正确交付到目的\n进程.")])])]),t._v(" "),_("li",[t._v("对收到的报文进行差错检测。")])]),t._v(" "),_("h3",{attrs:{id:"传输层分用的原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#传输层分用的原理"}},[t._v("#")]),t._v(" 传输层分用的原理")]),t._v(" "),_("p",[t._v("在网络层中，我们可以通过 mac 地址来标识唯一的主机。而在\n传输层中，我们可以通过端口号来标识唯一的进程。")]),t._v(" "),_("p",[t._v("通过 socket 我们就可以标识网络中的唯一一个主机以及上面的进程。\n( socket = (ip, port) )")]),t._v(" "),_("div",{staticStyle:{"text-align":"center"}},[_("img",{staticStyle:{width:"80%"},attrs:{src:v(480),alt:"img"}})]),t._v(" "),_("h2",{attrs:{id:"tcp-协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-协议"}},[t._v("#")]),t._v(" TCP 协议")]),t._v(" "),_("p",[t._v("TCP 协议是一种"),_("strong",[t._v("面向连接")]),t._v("的传输控制协议。\n使用 TCP 传输数据之前都必须建立连接，数据传送结束后要释放连接。\n不提供广播或多播服务。由于 TCP 要提供"),_("strong",[t._v("可靠传输")]),t._v("的"),_("strong",[t._v("面向连接")]),t._v("\n的传输服务，因为不可避免增加了许多开销，如：确认、流量控制、计时器\n以及连接管理等。")]),t._v(" "),_("p",[t._v("特点：")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("TCP 是面向连接（虚连接）的传输层协议。")])]),t._v(" "),_("li",[_("p",[t._v("每一条 TCP 连接只能有两个断电，每一条 TCP 练级额只能是点对点的。")])]),t._v(" "),_("li",[_("p",[t._v("TCP 提供可靠交付的服务，无差错、不丢失、不重复、按序到达（可靠有序，不丢不重）")])]),t._v(" "),_("li",[_("p",[t._v("TCP 提供全双工通信。")]),t._v(" "),_("ul",[_("li",[t._v("发送缓存：准备发送的数据和已经发送但未接收到确认的数据。")]),t._v(" "),_("li",[t._v("接收缓存：按需达到但尚未接受应用程序读取的数据和不按序到达的数据。")])])]),t._v(" "),_("li",[_("p",[t._v("TCP 面向字节流。TCP 把应用层交付下来的数据看成仅仅是一连串的无结构的"),_("strong",[t._v("字节流")]),t._v("。")])])]),t._v(" "),_("h3",{attrs:{id:"报文段格式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#报文段格式"}},[t._v("#")]),t._v(" 报文段格式")]),t._v(" "),_("div",{staticStyle:{"text-align":"center"}},[_("img",{staticStyle:{width:"80%"},attrs:{src:v(481),alt:"img"}})]),t._v(" "),_("p",[t._v("TCP 采用的是 0 比特填充法来确保 TCP 报文段是 4 bytes 的整数倍。")]),t._v(" "),_("p",[t._v("TCP 报文段"),_("strong",[t._v("首部")]),t._v("的长度为 20 bytes 的固定首部 + 选项字段。")]),t._v(" "),_("p",[t._v("TCP 报文段中每个字段的含义：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"center"}},[t._v("字段")]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("大小")]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("解释")])])]),t._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("源端口号")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("8 bits")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("目的端口号")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("8 bits")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("序号")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("32 bits")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("在一个 TCP 连接中传送的字节流中的每一个字节都按照顺序编号，序号字段表示所要发送数据的"),_("strong",[t._v("第一个字节序号")])])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("确认号")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("32 bits")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[_("strong",[t._v("期望")]),t._v("收到对方下一个报文段的第一个数据字节序号。若确认号为 N，则证明到 序号 N - 1 为止的所有数据都已经确认收到")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("数据偏移（首部长度）")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("4 bits")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("数据偏移字段也就首部长度字段。TCP 报文段的"),_("strong",[t._v("数据")]),t._v("起始处距离 TCP 报文段的起始处距离，是以 4 bytes 为单位。例如：TCP 数据偏移字段为 b1111，则 TCP 报文首部长为 15 × 4 = 60 bytes")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("保留")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("7 bits")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("控制位")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("6 bits")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("窗口")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("16 bits")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("发送方的接收窗口")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("检验和")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("检验首部 + 数据，检验时需要加上 12 bits 的伪首部（和 UDP 一样，但是协议字段为 6）")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("紧急指针")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("16 bits")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("指出本报文段中紧急数据的字节数。只有当 URG = 1 时才有效")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("选项")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}}),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("最大报文段长度 MSS、窗口扩大等")])])])]),t._v(" "),_("h3",{attrs:{id:"控制位的含义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#控制位的含义"}},[t._v("#")]),t._v(" 控制位的含义")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"center"}},[t._v("控制位")]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("URG")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("紧急位，表明次报文段中有紧急的数据，是高优先级的数据，应尽快传送，不用在缓存中排队，一般配合紧急指针字段使用")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("ACK")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("确认位。 当 ACK = 1 时确认号有效，在连接建立后所有传送的报文段都必须把 ACK 置为 1")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("PSH")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("推送位。当 PSH = 1 时，表明接收方尽快交付接收应用进程，不需要等到缓存填满再向上交付")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("RST")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("复位。当 RST = 1 时，表明 TCP 连接出现严重差错，必须释放连接，然后再重新建立连接")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("SYN")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("同步位。当 SYN = 1 时，表明是一个连接请求或连接接收报文")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("FIN")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("终止位。当 FIN = 1 时，表明该报文段发送方数据已发送完，要求释放连接")])])])]),t._v(" "),_("h3",{attrs:{id:"连接建立-三次握手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#连接建立-三次握手"}},[t._v("#")]),t._v(" 连接建立 - 三次握手")]),t._v(" "),_("p",[t._v("TCP 连接建立的三个阶段：")]),t._v(" "),_("ol",[_("li",[t._v("连接建立")]),t._v(" "),_("li",[t._v("数据传送")]),t._v(" "),_("li",[t._v("连接释放")])]),t._v(" "),_("p",[t._v("TCP 的连接过程如下图：")]),t._v(" "),_("div",{staticStyle:{"text-align":"center"}},[_("img",{staticStyle:{width:"80%"},attrs:{src:v(482),alt:"img"}})]),t._v(" "),_("p",[t._v("(小写为 TCP 数据报中的字段，大写为 TCP 数据报中控制字段的控制位)")]),t._v(" "),_("ol",[_("li",[t._v("客户端发送"),_("strong",[t._v("连接请求")]),t._v("报文段，无应用层数据。\n"),_("ul",[_("li",[t._v("SYN = 1，seq = x（随机生成）")])])]),t._v(" "),_("li",[t._v("服务端接收到客户端的连接请求，为该 TCP 连接"),_("strong",[t._v("分配缓存和变量")]),t._v("，并向客户端返回"),_("strong",[t._v("确认报文段")]),t._v("，允许连接，无应用层数据。\n"),_("ul",[_("li",[t._v("SYN = 1, ACK = 1, seq = y(随机), ack = x + 1")])])]),t._v(" "),_("li",[t._v("客户端接收到服务器的响应，为该 TCP 连接"),_("strong",[t._v("分配缓存和变量")]),t._v("，并向服务器返回确认的确认，可以携带数据。\n"),_("ul",[_("li",[t._v("SYN = 0, ACK = 1, seq = x + 1, ack = y + 1\n(连接已经建立，SYN = 0)")])])])]),t._v(" "),_("h3",{attrs:{id:"连接的释放-四次挥手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#连接的释放-四次挥手"}},[t._v("#")]),t._v(" 连接的释放 - 四次挥手")]),t._v(" "),_("div",{staticStyle:{"text-align":"center"}},[_("img",{staticStyle:{width:"80%"},attrs:{src:v(483),alt:"img"}})]),t._v(" "),_("ol",[_("li",[_("p",[t._v("客户端发送"),_("strong",[t._v("连接释放报文段")]),t._v("，停止发送数据，主动关闭 TCP 连接。")]),t._v(" "),_("ul",[_("li",[t._v("FIN = 1, seq = u")])])]),t._v(" "),_("li",[_("p",[t._v("服务器返回一个确认报文段，客户端到服务器这个方向（双工中其中一个）的连接就释放了，进入一个半关闭状态。")]),t._v(" "),_("ul",[_("li",[t._v("ACK = 1, seq = v, ack = u + 1")])])]),t._v(" "),_("li",[_("p",[t._v("服务器发送完数据，就发送连接释放报文段 P 请求，主动关闭 TCP 连接。")]),t._v(" "),_("ul",[_("li",[t._v("FIN = 1, ACK = 1, seq = w, ack = u + 1")])])]),t._v(" "),_("li",[_("p",[t._v("客户端返回一个确认报文段，再等到等待计时器的设置的 2MSL（最长报文段寿命）后，连接彻底关闭。")]),t._v(" "),_("ul",[_("li",[t._v("ACK = 1, seq = u + 1, ack = w + 1")])])])]),t._v(" "),_("p",[t._v("假设客户端响应服务器的报文段（最后一个）丢失了，服务器为了确认客户端\n接收到连接释放的请求，服务器就会重新发送请求释放报文段。\n如果没有这个 2MSL 的话，服务器就一直收不到这个响应就得一直发送连接释放的请求。")]),t._v(" "),_("h3",{attrs:{id:"可靠传输"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#可靠传输"}},[t._v("#")]),t._v(" 可靠传输")]),t._v(" "),_("p",[t._v("所谓的可靠传输指的是保证接收方进程从缓存中读取的字节流与发送方发送的字节流是完全一样的。")]),t._v(" "),_("p",[t._v("TCP 实现可靠传输的机制为")]),t._v(" "),_("ol",[_("li",[t._v("校验")]),t._v(" "),_("li",[t._v("序号")]),t._v(" "),_("li",[t._v("确认")]),t._v(" "),_("li",[t._v("重传")])]),t._v(" "),_("h3",{attrs:{id:"流量控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#流量控制"}},[t._v("#")]),t._v(" 流量控制")]),t._v(" "),_("h3",{attrs:{id:"拥塞控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#拥塞控制"}},[t._v("#")]),t._v(" 拥塞控制")]),t._v(" "),_("h2",{attrs:{id:"udp-协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#udp-协议"}},[t._v("#")]),t._v(" UDP 协议")]),t._v(" "),_("p",[t._v("UDP 协议是一种无连接的用户数据报协议。传送数据之前不需要建立连接\n收到 UDP 报文段后也不需要给出任何确认。")]),t._v(" "),_("p",[t._v("UDP 在 IP 数据报的基础上添加了很少的功能，即添加了复用分用和差错检测功能。")]),t._v(" "),_("p",[t._v("UDP 的主要特点：")]),t._v(" "),_("ol",[_("li",[t._v("UDP 是无连接，减少开销和发送数据之前的时延。")]),t._v(" "),_("li",[t._v("UDP 采用的是最大努力交付，即不保证可靠传输。")]),t._v(" "),_("li",[t._v("UDP 是面向报文的，适合一次性传输少量的网络应用。（即，应用层给 UDP 多长的报文，UDP 就照样发送。即一次就发送一个完整的报文）")]),t._v(" "),_("li",[t._v("UDP 没有拥塞控制，适合很多是实时网络应用。")]),t._v(" "),_("li",[t._v("UDP 的首部开销比较小（8 bytes）。")])]),t._v(" "),_("div",{staticStyle:{"text-align":"center"}},[_("img",{staticStyle:{width:"80%"},attrs:{src:v(484),alt:"img"}})]),t._v(" "),_("h3",{attrs:{id:"udp-的首部格式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#udp-的首部格式"}},[t._v("#")]),t._v(" UDP 的首部格式")]),t._v(" "),_("div",{staticStyle:{"text-align":"center"}},[_("img",{staticStyle:{width:"80%"},attrs:{src:v(485),alt:"img"}})]),t._v(" "),_("ol",[_("li",[t._v("16 位源端口号：可有可无。")]),t._v(" "),_("li",[t._v("16 位的目的端口号：必须带上。")]),t._v(" "),_("li",[t._v("16 位的 UDP 长度：UDP 用户数据报的"),_("strong",[t._v("整个")]),t._v("长度。例如，UDP 数据的长度为 7 个字节，则 UDP 整个数据报的长度为 7 + 8 = 15 字节。")]),t._v(" "),_("li",[t._v("16 位的 UDP 检验和：检测"),_("strong",[t._v("整个")]),t._v(" UDP 数据报是否有差错，有错就丢弃。（在分用时，如果找不到目的端口号，就丢弃报文，并向对方发送 ICMP “端口号不可达” 差错报告报文。")])]),t._v(" "),_("h3",{attrs:{id:"udp-校验"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#udp-校验"}},[t._v("#")]),t._v(" UDP 校验")]),t._v(" "),_("div",{staticStyle:{"text-align":"center"}},[_("img",{staticStyle:{width:"80%"},attrs:{src:v(486),alt:"img"}})]),t._v(" "),_("p",[t._v("UDP 伪首部的组成：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"center"}},[t._v("字段编号")]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("源 IP 地址")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("目的 IP 地址")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("全 0 的填充位")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("封装 UDP 报文的 IP 数据报首部协议字段")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("UDP 长度。包括 UDP 首部 8 bytes 和数据部分长度（不包括伪首部）")])])])]),t._v(" "),_("div",{staticStyle:{"text-align":"center"}},[_("img",{staticStyle:{width:"80%"},attrs:{src:v(487),alt:"img"}})]),t._v(" "),_("p",[t._v("在发送端处：")]),t._v(" "),_("ol",[_("li",[t._v("填上伪首部字段。")]),t._v(" "),_("li",[t._v("全 0 填充检验和字段。")]),t._v(" "),_("li",[t._v("全 0 填充数据部分，保证数据部分的长度为 4 bytes 的整数倍。")]),t._v(" "),_("li",[t._v("首部 + 伪首部 + 数据部分 采用二进制反码的方式求合。")]),t._v(" "),_("li",[t._v("把反码填入检验和中。")]),t._v(" "),_("li",[t._v("去掉伪首部，发送数据。")])]),t._v(" "),_("p",[t._v("在接收方处：")]),t._v(" "),_("ol",[_("li",[t._v("添加上伪首部")]),t._v(" "),_("li",[t._v("伪首部 + 首部 + 数据部分采用二进制反码求合。（注意：这里首部的校验和是发送方计算过的）")]),t._v(" "),_("li",[t._v("如果求合的结果全为 1 表示无差错。否则丢弃数据报或交付给应用层进行差错报告。")])])])}),[],!1,null,null,null);e.default=a.exports}}]);